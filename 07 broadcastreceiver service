##广播接收者

> 系统里面有各种各样的事件发生，它希望我们程序员或者是第三方应用也能知道这个事情的发生，所以以广播的形式发布出来一个通知，我们必须要做好一个广播接收者，才能收到这个广播，知道这个事件

> 这些事件如： 短信到来的事件 、 开启启动完成的事件、电池电量变更的事件..



###收听广播
1. 购买收音机
2. 装电池
3. 调频


####接收系统的广播

1. 监听SD卡的卸载
2. 开机启动
3. 向外呼叫电话
4. 监听软件安装与卸载
5. 短信窃听器


###广播在不同的版本特点

* 低版本 (2.3)
>  如果强制停止了应用(冻结了代码) ，那么就算广播到来，进程也会随之启动，也能收到广播


* 高版本 (4.1.2)
> 如果强制停止了应用，广播到来，进程不会启动，也不会收到广播。 


###自定义发广播

1. 定义意图

		Intent  intent = new Intent();
2. 指定广播所处的频道(action)

		//设置当前的广播处于什么频道
		intent.setAction("com.itheima.CCTV");
		
		//intent.setData(Uri.parse("iteheima://"));
3. 指定广播的数据

		//指定广播的数据
		intent.putExtra("data", "昨日，习近平主席陪同美国总统奥巴马，访问深圳黑马训练营，顺便接见了张浪学员，对广大学子寄予厚望。");
4. 发送广播

		//发送广播
		sendBroadcast(intent);


###广播的特点

* 有序广播

> 广播接收者收到广播是有先后顺序的，依据它们的优先级别来排列，优先级别高的可以修改广播里面的内容，甚至是终止广播的传输。 有点类似：中央文件的层层下发。


* 无序广播

> 广播接收者收到广播没有顺序之分，大家都是同时收到，也就谈不上终止广播的传输和修改广播的数据。有点类似： 每天晚上的7点档节目--新闻联播


###只能使用代码注册的广播

>  有一些广播事件，他们出现的频率非常的高，android是不允许在清单文件里面注册广播接收者收听这一类事件。 

> 屏幕电量和锁定 、 电池电量变更


		//声明广播接收者的对象
		receiver= new ScreenStatusReceiver();
		
		//表明了这个广播接收者收听什么样的广播，这里是一个过滤器
		IntentFilter filter = new IntentFilter();
		filter.addAction(Intent.ACTION_SCREEN_ON);
		filter.addAction(Intent.ACTION_SCREEN_OFF);
		
		//注册一个广播接收者
		registerReceiver(receiver, filter);

		------------------------------------------

		解除注册

		
	@Override
	protected void onDestroy() {
		super.onDestroy();
		
		//在界面销毁的时候，解除注册广播接收者，一旦解除，以后广播到来，将不会有任何响应
		unregisterReceiver(receiver);
	}


		
		###服务

* windows

>  长期在后台运行的，没有界面，并且是运行在独立的一个进程里面

* android

> 长期运行在后台、 没有界面，运行在当前的应用程序进程里面



###进程的优先级别

* Foreground process 

> 前台进程 : 当前与用户交互的应用所处的进程

* Visible process 

> 可视进程 ： 当前的应用程序已经失去了焦点，但是还能看见界面 ，所处的进程


* Service process

> 服务进程： 当前的应用程序有服务组件在运行

* Background process

> 后台进程 : 应用程序最小化了(home)

* Empty process

> 空进程 ： 应用程序内部已经没有活动的组件。(activity , service)

> 前台进程 --  可视进程 --- 服务进程 ---后台进程 --- 空进程


###服务的生命周期

* 完整生命周期

> onCreate -- onStartCommand -- onDestroy

* 多次启动服务

> 只会执行一次onCreate 方法，但是会执行多次onStartCommand

* 多次停止服务

> 只会执行一次onDestroy方法。
		
		
		
		
		
		

